import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { EmployeeGenderEnum } from '../../api/api';
import { Container, Typography, Button, CircularProgress, Box, Alert, TextField, MenuItem } from '@mui/material';
import { api } from '../../services/api';
import NewEmployeeInput from "../../components/NewEmployeeInput"

const EmployeeDetails: React.FC = () => {
  const { uuid } = useParams<{ uuid: string }>();

  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [editedEmployee, setEditedEmployee] = useState<any>(null);

  const navigate = useNavigate();

    // TODO: React Redux
    // Definiere eine State Struktur, welche aktuell nur eine Liste von Employees beinhaltet
    // Definiere Slices (Dispatcher), (useDispatch), (useSelector)

  useEffect(() => {
    const fetchEmployee = async () => {
      try {
        setLoading(true);
        // TODO: Use autogenerated api
        const response = await axios.get(`http://localhost:8080/employees/${uuid}`);
        setEditedEmployee(response.data);
        setError(null);
      } catch (err) {
        console.error('Error fetching employee:', err);
        setError('Error loading employee! Try again later.');
      } finally {
        setLoading(false);
      };
    };

    fetchEmployee();

  }, [uuid]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" my={4}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ mb: 2 }}>
        {error}
      </Alert>
    );
  }

  if (!editedEmployee) {
    return (
      <Typography variant="h6" component="h2">
        Employee not found
      </Typography>
    );
  };


 const handleSave = async () => {
   try {

     await api.employeesUuidPut(uuid!, {
       name: {
         firstName: editedEmployee.name.firstName,
         middleName: editedEmployee.name.middleName,
         lastName: editedEmployee.name.lastName,
       },
       department: editedEmployee.department,
       birthdate: editedEmployee.birthdate,
       gender: editedEmployee.gender,
       hourlyRate: editedEmployee.hourlyRate,
       hoursPerWeek: editedEmployee.hoursPerWeek,
     });
     navigate('/employees/');
   } catch (error) {
     console.error('Error updating employee:', error);
     setError('Failed to update employee. Please try again.');
   }
 };


 const handleInputChange = (field: string, value: any) => {
   setEditedEmployee((prev: any) => ({
     ...prev,
     [field]: value,
   }));
 };

 const handleNameChange = (field: string, value: string) => {
   setEditedEmployee((prev: any) => ({
     ...prev,
     name: {
       ...prev.name,
       [field]: value,
     },
   }));
 };


  return (

//null

    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Employee Details
      </Typography>
      <Box display = "flex" flexDirection="column" gap={2} sx={{width: "300px"}}>

        <NewEmployeeInput
        newEmployee={editedEmployee}
        setNewEmployee={setEditedEmployee}
        />
        </Box>
         <Box display="flex" justifyContent="flex" mt={2}>
                    <Button size="small" onClick={() => navigate(`/employees/`)}>
                    Cancel
                    </Button>
                    <Button size="small" color="primary" onClick={handleSave}>
                    Save
                    </Button>
                </Box>
    </Container>

      /*
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Employee Details
      </Typography>
      <Box display = "flex" flexDirection="column" gap={2} sx={{width: "300px"}}>

      <TextField
      required
      variant="standard"
      label="First Name"
      value={editedEmployee.name.firstName}
      onChange={(e) => handleNameChange("firstName", e.target.value)}
      />

      <TextField
      required
      variant="standard"
      label="Last Name"
      value={editedEmployee.name.lastName}
      onChange={(e) => handleNameChange("lastName", e.target.value)}
      />

      <TextField
      required
      variant="standard"
      label="Department"
      value={editedEmployee.department}
      onChange={(e) => handleInputChange("department", e.target.value)}
      />

      <TextField
      required
      variant="standard"
      label="Birthdate"
      type="date"
      InputLabelProps={{ shrink: true }}
      value={editedEmployee.birthdate}
      onChange={(e) => handleInputChange("birthdate", e.target.value)}
      />

      <TextField
      required
      select
      variant="standard"
      label="Gender"
      value={editedEmployee.gender}
      onChange={(e) => handleInputChange("gender", e.target.value)}
      >
        <MenuItem value={EmployeeGenderEnum.M}>Male</MenuItem>
        <MenuItem value={EmployeeGenderEnum.W}>Female</MenuItem>
        <MenuItem value={EmployeeGenderEnum.D}>Diverse</MenuItem>
      </TextField>

      <TextField
      required
      variant="standard"
      label="Hourly Rate"
      type="number"
      value={editedEmployee.hourlyRate}
      onChange={(e) => handleInputChange("hourlyRate", e.target.value)}
      />

      <TextField
      required
      variant="standard"
      label="Hours Per Week"
      type="number"
      value={editedEmployee.hoursPerWeek}
      onChange={(e) => handleInputChange("hoursPerWeek", e.target.value)}
      />

      <TextField
      variant="standard"
      label="Monthly Salary"
      value={editedEmployee.monthlySalary}
      slotProps={{
          input: {
              readOnly: true,
              },
          }}
      />
      </Box>
        <Box display="flex" justifyContent="flex" mt={2}>
            <Button size="small" onClick={() => navigate(`/employees/`)}>
            Cancel
            </Button>
            <Button size="small" color="primary" onClick={handleSave}>
            Save
            </Button>
        </Box>
    </Container>
    */
  );
};

export default EmployeeDetails;
