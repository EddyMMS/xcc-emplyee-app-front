import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { EmployeeGenderEnum } from "../../api/api";
import {
  Container,
  Typography,
  Button,
  CircularProgress,
  Box,
  Alert,
  TextField,
  MenuItem,
} from "@mui/material";
import { api } from "../../services/api";
import NewEmployeeInput from "../../components/NewEmployeeInput";

const EmployeeDetails: React.FC = () => {
  const { uuid } = useParams<{ uuid: string }>();

  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [editedEmployee, setEditedEmployee] = useState<any>(null);

  const navigate = useNavigate();
  useEffect(() => {
    const fetchEmployee = async () => {
      try {
        setLoading(true);
        // TODO: Use autogenerated api
        const response = await axios.get(
          `http://localhost:8080/employees/${uuid}`
        );
        setEditedEmployee(response.data);
        setError(null);
      } catch (err) {
        console.error("Error fetching employee:", err);
        setError("Error loading employee! Try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchEmployee();
  }, [uuid]);

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        my={4}
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert
        severity="error"
        sx={{ mb: 2 }}
      >
        {error}
      </Alert>
    );
  }

  if (!editedEmployee) {
    return (
      <Typography
        variant="h6"
        component="h2"
      >
        Employee not found
      </Typography>
    );
  }

  const handleSave = async () => {
    try {
      await api().employeesUuidPut(uuid!, {
        name: {
          firstName: editedEmployee.name.firstName,
          middleName: editedEmployee.name.middleName,
          lastName: editedEmployee.name.lastName,
        },
        department: editedEmployee.department,
        birthdate: editedEmployee.birthdate,
        gender: editedEmployee.gender,
        hourlyRate: editedEmployee.hourlyRate,
        hoursPerWeek: editedEmployee.hoursPerWeek,
      });
      navigate("/employees/");
    } catch (error) {
      console.error("Error updating employee:", error);
      setError("Failed to update employee. Please try again.");
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setEditedEmployee((prev: any) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleNameChange = (field: string, value: string) => {
    setEditedEmployee((prev: any) => ({
      ...prev,
      name: {
        ...prev.name,
        [field]: value,
      },
    }));
  };

  return (
    //null

    <Container
      maxWidth="lg"
      sx={{ mt: 4, mb: 4 }}
    >
      <Typography
        variant="h4"
        component="h1"
        gutterBottom
      >
        Employee Details
      </Typography>
      <Box
        display="flex"
        flexDirection="column"
        gap={2}
        sx={{ width: "300px" }}
      >
        <NewEmployeeInput
          newEmployee={editedEmployee}
          setNewEmployee={setEditedEmployee}
        />
      </Box>
      <Box
        display="flex"
        justifyContent="flex"
        mt={2}
      >
        <Button
          size="small"
          onClick={() => navigate(`/employees/`)}
        >
          Cancel
        </Button>
        <Button
          size="small"
          color="primary"
          onClick={handleSave}
        >
          Save
        </Button>
      </Box>
    </Container>
  );
};

export default EmployeeDetails;
