/* tslint:disable */
/* eslint-disable */
/**
 * management-app
 * API for managing employees
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'uuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'birthdate'?: string;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'hourlyRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'hoursPerWeek'?: number;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    'monthlySalary'?: number;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'gender'?: EmployeeGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    'department'?: string;
    /**
     * 
     * @type {Name}
     * @memberof Employee
     */
    'name'?: Name;
}

export const EmployeeGenderEnum = {
    M: 'M',
    W: 'W',
    D: 'D'
} as const;

export type EmployeeGenderEnum = typeof EmployeeGenderEnum[keyof typeof EmployeeGenderEnum];

/**
 * 
 * @export
 * @interface Name
 */
export interface Name {
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface NewEmployeeRequest
 */
export interface NewEmployeeRequest {
    /**
     * 
     * @type {string}
     * @memberof NewEmployeeRequest
     */
    'birthdate'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewEmployeeRequest
     */
    'hourlyRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewEmployeeRequest
     */
    'hoursPerWeek'?: number;
    /**
     * 
     * @type {string}
     * @memberof NewEmployeeRequest
     */
    'gender'?: NewEmployeeRequestGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof NewEmployeeRequest
     */
    'department'?: string;
    /**
     * 
     * @type {Name}
     * @memberof NewEmployeeRequest
     */
    'name'?: Name;
}

export const NewEmployeeRequestGenderEnum = {
    M: 'M',
    W: 'W',
    D: 'D'
} as const;

export type NewEmployeeRequestGenderEnum = typeof NewEmployeeRequestGenderEnum[keyof typeof NewEmployeeRequestGenderEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new employee
         * @param {NewEmployeeRequest} newEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesPost: async (newEmployeeRequest: NewEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newEmployeeRequest' is not null or undefined
            assertParamExists('employeesPost', 'newEmployeeRequest', newEmployeeRequest)
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidDelete: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('employeesUuidDelete', 'uuid', uuid)
            const localVarPath = `/employees/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidGet: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('employeesUuidGet', 'uuid', uuid)
            const localVarPath = `/employees/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an employee by UUID
         * @param {string} uuid 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidPut: async (uuid: string, employee: Employee, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('employeesUuidPut', 'uuid', uuid)
            // verify required parameter 'employee' is not null or undefined
            assertParamExists('employeesUuidPut', 'employee', employee)
            const localVarPath = `/employees/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employee, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllEmployees: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new employee
         * @param {NewEmployeeRequest} newEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesPost(newEmployeeRequest: NewEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesPost(newEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.employeesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesUuidDelete(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesUuidDelete(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.employeesUuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesUuidGet(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesUuidGet(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.employeesUuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an employee by UUID
         * @param {string} uuid 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeesUuidPut(uuid: string, employee: Employee, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeesUuidPut(uuid, employee, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.employeesUuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllEmployees(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employee>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllEmployees(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listAllEmployees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new employee
         * @param {NewEmployeeRequest} newEmployeeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesPost(newEmployeeRequest: NewEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.employeesPost(newEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employeesUuidDelete(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an employee by UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.employeesUuidGet(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an employee by UUID
         * @param {string} uuid 
         * @param {Employee} employee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeesUuidPut(uuid: string, employee: Employee, options?: RawAxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.employeesUuidPut(uuid, employee, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllEmployees(options?: RawAxiosRequestConfig): AxiosPromise<Array<Employee>> {
            return localVarFp.listAllEmployees(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new employee
     * @param {NewEmployeeRequest} newEmployeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    employeesPost(newEmployeeRequest: NewEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<Employee>;

    /**
     * 
     * @summary Delete an employee by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    employeesUuidDelete(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get an employee by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    employeesUuidGet(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Employee>;

    /**
     * 
     * @summary Update an employee by UUID
     * @param {string} uuid 
     * @param {Employee} employee 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    employeesUuidPut(uuid: string, employee: Employee, options?: RawAxiosRequestConfig): AxiosPromise<Employee>;

    /**
     * 
     * @summary Get all employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listAllEmployees(options?: RawAxiosRequestConfig): AxiosPromise<Array<Employee>>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new employee
     * @param {NewEmployeeRequest} newEmployeeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public employeesPost(newEmployeeRequest: NewEmployeeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).employeesPost(newEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an employee by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public employeesUuidDelete(uuid: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).employeesUuidDelete(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an employee by UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public employeesUuidGet(uuid: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).employeesUuidGet(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an employee by UUID
     * @param {string} uuid 
     * @param {Employee} employee 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public employeesUuidPut(uuid: string, employee: Employee, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).employeesUuidPut(uuid, employee, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAllEmployees(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listAllEmployees(options).then((request) => request(this.axios, this.basePath));
    }
}



